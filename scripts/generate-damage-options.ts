#!/usr/bin/env node

/**
 * Generator script for damage options
 * 
 * Parses docs/Skadetyp, Placering, Position_20251023.csv and generates
 * lib/damage-options.ts with sorted, deduplicated damage type mappings.
 * 
 * Usage: npx tsx scripts/generate-damage-options.ts
 */

import * as fs from 'fs';
import * as path from 'path';

const CSV_PATH = path.join(__dirname, '../docs/Skadetyp, Placering, Position_20251023.csv');
const OUTPUT_PATH = path.join(__dirname, '../lib/damage-options.ts');

interface DamageEntry {
  typ: string;
  placering: string;
  position: string;
}

/**
 * Swedish collation comparator for sorting
 */
function swedishCollator(a: string, b: string): number {
  return a.localeCompare(b, 'sv-SE', { sensitivity: 'base' });
}

/**
 * Normalize whitespace in a string (trim and collapse multiple spaces)
 */
function normalizeWhitespace(str: string): string {
  return str.trim().replace(/\s+/g, ' ');
}

/**
 * Parse CSV file and return entries
 */
function parseCSV(filePath: string): DamageEntry[] {
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n');
  const entries: DamageEntry[] = [];
  
  // Skip header row (line 0) and process data
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;
    
    // Parse CSV - handle quoted fields and trim whitespace/tabs
    const parts = line.split(',').map(part => {
      // Remove quotes and normalize whitespace
      return normalizeWhitespace(part.replace(/^["']|["']$/g, ''));
    });
    
    if (parts.length < 3) continue;
    
    const typ = parts[0] || '';
    const placering = parts[1] || '';
    const position = parts[2] || '';
    
    // Skip empty entries
    if (!typ) continue;
    
    entries.push({ typ, placering, position });
  }
  
  return entries;
}

/**
 * Build the damage options mapping
 */
function buildDamageOptions(entries: DamageEntry[]): Record<string, Record<string, string[]>> {
  const result: Record<string, Record<string, string[]>> = {};
  
  for (const entry of entries) {
    const { typ, placering, position } = entry;
    
    // Initialize typ if not exists
    if (!result[typ]) {
      result[typ] = {};
    }
    
    // Skip entries without placering
    if (!placering) continue;
    
    // Initialize placering if not exists
    if (!result[typ][placering]) {
      result[typ][placering] = [];
    }
    
    // Add position if it exists and is not already in the array (deduplication)
    if (position && !result[typ][placering].includes(position)) {
      result[typ][placering].push(position);
    }
  }
  
  // Sort everything using Swedish collation
  const sortedResult: Record<string, Record<string, string[]>> = {};
  const sortedTypes = Object.keys(result).sort(swedishCollator);
  
  for (const typ of sortedTypes) {
    sortedResult[typ] = {};
    const sortedPlaceringar = Object.keys(result[typ]).sort(swedishCollator);
    
    for (const placering of sortedPlaceringar) {
      // Sort positions
      sortedResult[typ][placering] = result[typ][placering].sort(swedishCollator);
    }
  }
  
  return sortedResult;
}

/**
 * Generate TypeScript file content
 */
function generateTypeScriptFile(damageOptions: Record<string, Record<string, string[]>>): string {
  return `/**
 * Auto-generated damage options
 * 
 * Generated from: docs/Skadetyp, Placering, Position_20251023.csv
 * Generated at: ${new Date().toISOString()}
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 * Run: npm run generate:damage-options
 */

export const DAMAGE_OPTIONS: Record<string, Record<string, string[]>> = ${JSON.stringify(damageOptions, null, 2)};
`;
}

/**
 * Main function
 */
function main() {
  console.log('ðŸ”„ Parsing CSV file...');
  const entries = parseCSV(CSV_PATH);
  console.log(`âœ… Parsed ${entries.length} entries`);
  
  console.log('ðŸ”„ Building damage options mapping...');
  const damageOptions = buildDamageOptions(entries);
  const typeCount = Object.keys(damageOptions).length;
  console.log(`âœ… Built mapping with ${typeCount} damage types`);
  
  console.log('ðŸ”„ Generating TypeScript file...');
  const fileContent = generateTypeScriptFile(damageOptions);
  fs.writeFileSync(OUTPUT_PATH, fileContent, 'utf-8');
  console.log(`âœ… Generated: ${OUTPUT_PATH}`);
  
  console.log('\nâœ¨ Done! Damage options generated successfully.');
}

// Run main function
main();
